{  
   "paragraphs":[  
      {  
         "text":"%md\n## Load datasource into a flink datastream",
         "dateUpdated":"2017-09-10T14:41:34+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474264_-405590418",
         "id":"20160819-094810_981063233",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h2>Load datasource into a flink datastream</h2>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:41:34+0000",
         "dateFinished":"2017-09-10T14:41:34+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:243",
         "focus":true
      },
      {  
         "text":"%angular   \n<style>\nbody {\n    padding-top: 30px  !important;\n    \n   \n}\n\n.inner-box{\n     background-color: #536dfe;\n}\n</style>\n\n",
         "dateUpdated":"2017-09-10T14:32:06+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/html",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474267_-405205669",
         "id":"20170317-095524_633979447",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:07+0000",
         "dateFinished":"2017-09-10T14:32:08+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:244",
         "errorMessage":""
      },
      {  
         "text":"%sh\nif [ ! -f debs2013.data ]; then\n    echo \"File not found!\"\n    wget https://s3-eu-west-1.amazonaws.com/debs2013/+debs2013.data\nelse \n    echo \"File is there\"\nfi",
         "dateUpdated":"2017-09-10T14:32:07+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/sh",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":false
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474267_-405205669",
         "id":"20160811-172700_1889671",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "status":"READY",
         "errorMessage":"",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:245"
      },
      {  
         "text":"%flink\nimport org.apache.flink.streaming.api.functions.source._;\nimport org.apache.flink.streaming.api.functions.source.SourceFunction.SourceContext;\nimport scala.io.Source\nimport org.apache.flink.streaming.api.TimeCharacteristic\nimport org.apache.flink.streaming.api.functions._\nimport org.apache.flink.streaming.api.watermark._\n\nclass FileSource extends RichSourceFunction[String]() with StoppableFunction{\n    var startSystemTime = System.nanoTime();\n    var startDataTime = 10753295594424116L;\n    var stoped = false;\n    \n    def shiftIterator(fileIterator : Iterator[String] ): Unit = {\n        \n        var line = fileIterator.next()\n        var lineDataTimestamp = line.split(\",\")(1).toLong;\n        \n        while(lineDataTimestamp<=startDataTime){\n            line = fileIterator.next()\n            lineDataTimestamp = line.split(\",\")(1).toLong;\n        }\n    }\n    \n    def run(sc: SourceContext[String]): Unit = {\n        var fileIterator = scala.tools.nsc.io.File(\"debs2013.data\").lines();\n        \n        shiftIterator(fileIterator) \n        startSystemTime = System.nanoTime();\n        \n        for(line <-scala.tools.nsc.io.File(\"debs2013.data\").lines()){\n            \n            if(Thread.interrupted() || stoped){\n                return\n            }\n            var dataTimestamp = line.split(\",\")(1).toLong;\n            if(dataTimestamp > startDataTime){\n                var elapsedSystemTime = System.nanoTime() - startSystemTime;\n                var elapsedDataTime = (dataTimestamp - startDataTime) / 1000; // picoseconds to nanoseconds\n                while(elapsedDataTime > elapsedSystemTime && !Thread.interrupted()){\n                    elapsedSystemTime = System.nanoTime() - startSystemTime;\n                    // active waiting for time\n                } \n                sc.collect(line);\n            }\n        }\n    }\n    \n    def stop() : Unit= {\n        stoped = true \n    }\n    \n    def cancel() : Unit= {\n        stoped = true \n    }\n\n}\n\nvar fs = new FileSource()\n\n\n\n",
         "dateUpdated":"2017-09-10T14:32:07+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474268_-407129414",
         "id":"20160811-173150_1383375754",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:08+0000",
         "dateFinished":"2017-09-10T14:32:46+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:246",
         "errorMessage":""
      },
      {  
         "text":"%md \n## Map the string data stream items into a DebsDataItem stream. ",
         "dateUpdated":"2017-09-10T14:41:24+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474268_-407129414",
         "id":"20160819-095156_1866848755",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h2>Map the string data stream items into a DebsDataItem stream.</h2>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:41:24+0000",
         "dateFinished":"2017-09-10T14:41:24+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:247",
         "focus":true
      },
      {  
         "text":"%flink\n/**\n * sid, ts, \n * x, y, z, \n * |v| in μm/s,\n * |a| is zero when the ball is at a fixed position and not 9.81 m/s²).\n * vx, vy, vz, describe direction by a vector with size of 10,000\n * ax, ay, az\n * \n * \n * Hence, the speed of the object in x-direction in SI-units (m/s) is calculated by \n *          v'x = |v| * vx * 1e-4 * 1e-6\n * \n */\n\ncase class DebsDataItem(sid:Int, ts:Long, x:Int, y:Int, z:Int, v:Int, a:Int , vx:Int, vy:Int, vz:Int, ax:Int, ay:Int, az:Int )\n\nvar debs2013DataStream = senv.addSource(fs)\n\nvar debsItemDataStreamWithoutTime = debs2013DataStream.map(line=>{\n    val items = line.split(\",\")\n    DebsDataItem(\n        items(0).toInt,\n        items(1).toLong,\n        items(2).toInt,\n        items(3).toInt,\n        items(4).toInt,\n        items(5).toInt,\n        items(6).toInt,\n        items(7).toInt,\n        items(8).toInt,\n        items(9).toInt,\n        items(10).toInt,\n        items(11).toInt,\n        items(12).toInt\n        )\n})",
         "dateUpdated":"2017-09-10T14:32:10+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474268_-407129414",
         "id":"20160810-184841_159248738",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:11+0000",
         "dateFinished":"2017-09-10T14:32:53+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:248",
         "errorMessage":""
      },
      {  
         "text":"%md\n### assingn timestamp as eventtime",
         "dateUpdated":"2017-09-10T14:41:47+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474269_-407514163",
         "id":"20160913-174500_974120697",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h3>assingn timestamp as eventtime</h3>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:41:47+0000",
         "dateFinished":"2017-09-10T14:41:47+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:249",
         "focus":true
      },
      {  
         "text":"%flink\nimport org.apache.flink.streaming.api.TimeCharacteristic\nimport org.apache.flink.streaming.api.functions._\nimport org.apache.flink.streaming.api.watermark._\nsenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\n// Assign Event timestemp\nclass DebsTimestampAssigner extends AssignerWithPunctuatedWatermarks[DebsDataItem](){\n\n    def\textractTimestamp(element:DebsDataItem, previousElementTimestamp:Long):Long = {\n        val ms = element.ts / 1000000000L; // The timestamp profided by the dataset is in picoseconds, so we neet to convert it in milliseconds. \n        ms\n    }\n    \n    def  checkAndGetNextWatermark( lastElement: DebsDataItem,  extractedTimestamp: Long): Watermark = {\n        // return the watermark as current time minus the maximum time lag\n\t\treturn new Watermark(extractedTimestamp);\n    }\n}\n  \nvar debsItemDataStream = debsItemDataStreamWithoutTime.setParallelism(1).assignTimestampsAndWatermarks(new DebsTimestampAssigner());",
         "dateUpdated":"2017-09-10T14:32:12+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474269_-407514163",
         "id":"20160913-174539_6831408",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:46+0000",
         "dateFinished":"2017-09-10T14:32:55+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:250",
         "errorMessage":""
      },
      {  
         "text":"%md \n## Ui Elements\n",
         "dateUpdated":"2017-09-10T14:32:13+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474270_-406359916",
         "id":"20160819-095245_1704675442",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:13+0000",
         "dateFinished":"2017-09-10T14:32:13+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:251",
         "errorMessage":""
      },
      {  
         "text":"%md \n### Implementation of the player selection ui",
         "dateUpdated":"2017-09-10T14:41:50+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474270_-406359916",
         "id":"20160829-093254_1180276378",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h3>Implementation of the player selection ui</h3>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:41:50+0000",
         "dateFinished":"2017-09-10T14:41:50+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:252",
         "focus":true
      },
      {  
         "text":"%angular  \n\n<style>\n    i2-player-button{\n        display: block;\n    }\n    \n    i2-player-button div{\n        margin: 5px;\n    }\n    \n    .selected\n    {\n            box-shadow: 0px 0px 5px rgba(16, 187, 53, 0.99);\n    }\n    \n</style>\n<script>\nzeppelin.addComponent(\n    \"i2PlayerButton\",\n    \"<div class='row' style='       margin-top: -40px;  margin-right: 0px;    margin-left: 0px;'>\"+\n    \"<div class='col-md-6'>\" +\n   \n    \"<button style='margin: 1px;'  ng-repeat='player in playersA' ng-class='{btn-dange: isSelected(player)}' class='btn btn-primary' ng-click='selectPlayer(player)' ng-disabled='!manual && !isSelected(player)'>{{player.name}}</button>\"+\n      \"</div>\"+\n  \"<div  class='col-md-5'>\"+\n    \"<button style='margin: 1px;' ng-repeat='player in playersB' ng-class='{btn-danger: isSelected(player)}' class='btn btn-warning' ng-click='selectPlayer(player)' ng-disabled='!manual && !isSelected(player)'>{{player.name}}</button>\"+\n    \"</div>\"+\n     \"</div>\",\n    function(scope,element){\n       scope.manual = true;\n       scope.playersA = [\n           {name:\"Nick Gertje\",sid:[13,14]},\n           {name:\"Dennis Dotterweich\",sid:[47,16]},\n           {name:\"Niklas Waelzlein\",sid:[49,88]},\n           {name:\"Wili Sommer\",sid:[19,52]},\n           {name:\"Philipp Harlass\",sid:[53,54]},\n           {name:\"Roman Hartleb\",sid:[23,24]},\n           {name:\"Erik Engelhardt\",sid:[57,58]},\n           {name:\"Sandro Schneider\",sid:[59,28]}]\n    \n       scope.playersB = [\n           {name:\"Leon Krapf\",sid:[61,62]},\n           {name:\"Kevin Baer\",sid:[63,64]},\n           {name:\"Luca Ziegler\",sid:[65,66]},\n           {name:\"Ben Mueller\",sid:[67,68]},\n           {name:\"Vale Reitstetter\",sid:[69,38]},\n           {name:\"Christopher Lee\",sid:[71,40]},\n           {name:\"Leon Heinze\",sid:[73,74]},\n           {name:\"Leo Langhans\",sid:[75,44]}];  \n           \n        scope.selectedSensorLocal = 13;\n        scope.isSelected = function(player){\n            var index = _.indexOf(player.sid, scope.selectedSensorLocal)\n            return index != -1;\n        }\n        scope.$watch(\"selectedSensor\",function(old,newItem){\n            if(!scope.manual){\n                scope.selectedSensorLocal = newItem;\n            }\n        })\n       \n        scope.selectPlayer = function(player){\n           console.log(\"select \" + player.sid)    \n           scope.selectedSensorLocal = player.sid[0];\n        }\n        \n        \n})\n</script>",
         "dateUpdated":"2017-09-10T14:32:14+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/html",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474270_-406359916",
         "id":"20160810-181856_1882651917",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:15+0000",
         "dateFinished":"2017-09-10T14:32:15+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:253",
         "errorMessage":""
      },
      {  
         "text":"%flink\nimport org.apache.zeppelin.flink.ui._;\nclass PlayerUi() extends UIComponent[Int,Int](classOf[Int]) {\n    var manual_player_selection = true;\n    logger.info(\"Start PlayerUi\");\n    scope.remove(\"selectedSensor\")\n    scope.remove(\"selectedSensorLocal\")\n    scope.remove(\"manual\")\n    scope.put(\"selectedSensor\" , 13);\n    scope.put(\"selectedSensorLocal\" , 13);\n    scope.put(\"manual\" , manual_player_selection);\n    scope.watch(\"selectedSensorLocal\",(_:Int,newValue:Int)=>{\n        logger.info(\"Update\"+ newValue);\n        addMessageToOutputStream(newValue)\n    })\n    \n    scope.watch(\"manual\",(_:Boolean,newValue:Boolean)=>{\n        \n        this.manual_player_selection = newValue;\n    })\n   \n   override def  invoke(item:Int): Unit = {\n       if(!this.manual_player_selection){\n        println(\"invoke\" + item)  \n        logger.info(\"invoke\"+ item);\n        scope.put(\"selectedSensor\" , item);\n       }\n   }\n   \n   def getTemplate(): String = {\n       \"<i2-player-button></i2-player-button>\"\n   }\n}  \n  \n\n\n\n\n",
         "dateUpdated":"2017-09-10T14:32:15+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474271_-406744665",
         "id":"20160810-181909_1451672004",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:54+0000",
         "dateFinished":"2017-09-10T14:32:56+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:254",
         "errorMessage":""
      },
      {  
         "text":"%md \n### Implementation of the football field",
         "dateUpdated":"2017-09-10T14:41:53+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474271_-406744665",
         "id":"20160819-095333_1233897701",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h3>Implementation of the football field</h3>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:41:53+0000",
         "dateFinished":"2017-09-10T14:41:53+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:255",
         "focus":true
      },
      {  
         "text":"%angular   \n\n<style>\n    .line {\n        fill: none;\n        stroke: #000;\n        stroke-width: 1.5px;\n    }\n    .block{\n        height: 300px;\n        display: block;\n    }\n</style>\n\n<script>\nzeppelin.addComponent(\n    \"i2FootballField\",\n    \"<?xml version='1.0' standalone='no?'>\"+ \n\"<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' \"+ \n  \"'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>\"+ \n  \"<svg width='1268px' height='808px' viewBox='0 0 1150 720' stroke='white' version='1.1'\"+\n\"     xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\"+\n\"    <rect x='0' y='0' width='1150' height='720' fill='green' />\"+\n\"    <path d='M 575,20 L 50,20 50,700 1100,700 1100,20 575,20 575,700 z' stroke='white' stroke-width='3' fill='green' />\"+\n\"    <circle cx='575' cy='360' r='91.5' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <circle cx='575' cy='360' r='2' stroke='white' fill='white' />\"+\n\"    <circle cx='160' cy='360' r='2' stroke='white' fill='white' />\"+\n\"    <circle cx='990' cy='360' r='2' stroke='white' fill='white' />\"+\n\"    <path d='M 50,324.4 L 40,324.4 40, 396.6 50 396.6 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 1100,324.4 L 1110,324.4 1110,396.6 1100,396.6 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 50,269.4 L 105,269.4 105,451.6 50 451.6 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 1100,269.4 L 1045,269.4 1045,451.6 1100,451.6 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 50,159.4 L 215,159.4 215,561.6 50 561.6 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 1100,159.4 L 935,159.4 935,561.6 1100,561.6 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 215,286.875 A 91.5,91.5 0 0,1 215,433.125 z' stroke='white' stroke-width='3' fill='green' />\"+\n\"    <path d='M 935,286.875 A 91.5,91.5 0 0,0 935,433.125 z' stroke='white' stroke-width='3' fill='green' />\"+\n\"    <path d='M 50,30 A 10,10 0 0,0 60,20 L 50,20 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 60,700 A 10,10 0 0,0 50,690 L 50,700 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 1100,690 A 10,10 0 0,0 1090,700 L 1100,700 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"    <path d='M 1090,20 A 10,10 0 0,0 1100,30 L 1100,20 z' stroke='white' stroke-width='3' fill-opacity='0' />\"+\n\"</svg>\", \n    function(scope, element) {\n       \n        element.addClass('block');\n        \n        var points = []\n        \n        var scale = 0.7;\n        var dataTopLeftX = 0;\n        var dataWidth = 52489;\n        var dataTopLeftY = -33960;\n        var dataHeight = 67930;\n\n        viewHeight = 690;\n        viewWidth = 1050;\n    \n        var svg = d3.select($(element).children(\"svg\")[0])\n        \n        var sidsTeamA = [13,14,97,98,47,16,49,88,19,52,53,54,23,24,57,58,59,28]\n        var sidsTeamB = [61,62,99,100,63,64,65,66,67,68,69,38,71,40,73,74,75,44]\n        var sensorGroups = [ [13,14,97,98],  [47,16], [49,88], [19,52],    [53,54],  [23,24],\n          [57,58],  [59,28], [61,62,99,100],    [63,64],  [65,66],    [67,68],  [69,38],   [71,40], [73,74],[75,44]];\n        function unitsPerPixel() {\n            return {\n                width: dataHeight / viewWidth,\n                height: dataWidth / viewHeight\n            }\n        }\n\n        function mapPoint(point) {\n            var unitPerPixcel = unitsPerPixel()\n            return {\n                y: ((point.x) / unitPerPixcel.height)+15,\n                x: ((point.y + 33960) / unitPerPixcel.width ) +50,\n            }\n        }\n        \n        var requested = false;\n        \n        function addPoint(point) {\n            var cordinates = mapPoint(point);\n            var id = point.id;\n            if(points[id] == undefined)\n                points[id] = point\n             points[id].cordinates = cordinates;\n             points[id].selected = point.selected\n        }\n        \n     \n        \n        var stop = false;\n        function draw() {\n          \n          for(var i = 0; i<points.length;i++){\n            if(points[i] != undefined){\n                var point = points[i];\n                if(point.svg == undefined){\n                    point.svg = svg.append(\"circle\")\n                                .attr(\"r\", 10)\n                                .attr(\"id\", i)\n                                \n                }\n                point.svg\n                        .attr(\"cx\", point.cordinates.x)\n                        .attr(\"cy\", point.cordinates.y)\n                        .style(\"fill\", getColor(point));\n            }\n          }\n        }\n        \n        function isBallEvent(point){\n            return point.id==4 || point.id==8 || point.id==10 || point.id== 12;\n        }\n        \n        function isSelected(event){\n            return event.selected ||currentGroup.indexOf(event.id)!=-1;\n        }\n        \n        function isTeamA(event){\n            return  sidsTeamA.indexOf(event.id)!=-1;\n        }\n         function isTeamB(event){\n            return  sidsTeamB.indexOf(event.id)!=-1;\n        }\n        \n        function getColor(event){\n            if(isBallEvent(event)){\n                return \"white\"\n            }\n            else if(isSelected(event)){\n                console.log(event.id)\n                return \"red\";\n            }\n            else if(isTeamA(event)){\n                 return \"blue\"\n            }else if(isTeamB(event)){\n                 return \"orange\"\n            }\n            else{\n                return \"black\"\n            }\n        }\n        \n        var currentGroup = sensorGroups[0];\n       \n        var init = false;\n        var remove = scope.$watch('point2', function(newPoinsts, oldValue) {\n            //console.log(newPoinsts)\n            if(newPoinsts!=undefined)\n                newPoinsts.forEach(function(newPoinst){\n                    if(newPoinst._4){\n                        currentGroup= sensorGroups.find(function(group){return group.indexOf(newPoinst._1)!=-1})\n                    }\n                    addPoint({id:newPoinst._1,x:newPoinst._2,y:newPoinst._3,selected:newPoinst._4})\n                })\n             window.requestAnimationFrame(draw); \n        });\n        \n        scope.$on('clean', function() {\n            remove()\n            stop = true;\n        });\n       \n    })\n</script>\n",
         "dateUpdated":"2017-09-10T14:32:17+0000",
         "config":{  
            "lineNumbers":false,
            "colWidth":6,
            "editorMode":"ace/mode/html",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474271_-406744665",
         "id":"20160810-190348_1037428157",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:17+0000",
         "dateFinished":"2017-09-10T14:32:17+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:256",
         "errorMessage":""
      },
      {  
         "text":"%flink \nimport scala.collection.JavaConverters._\nimport org.apache.zeppelin.flink.ui._;\nimport org.apache.zeppelin.flink.FlinkInterpreter;\n\nclass FootballFieldUi() extends UIComponent[List[(Int,Int,Int,Boolean)],Any](classOf[Any]) {\n\n   logger.info(\"Start SoccerFieldUi\");\n   scope.remove(\"point2\")\n   \n   override def invoke(item:List[(Int,Int,Int,Boolean)]): Unit = {\n       scope.put(\"point2\" , item.asJava);\n   }\n   \n   def getTemplate(): String = {\n       \"<i2-football-field></i2-football-field>\"\n   }\n}\n",
         "dateUpdated":"2017-09-10T14:32:17+0000",
         "config":{  
            "lineNumbers":false,
            "tableHide":false,
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474272_-420980374",
         "id":"20160810-190341_344410725",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:55+0000",
         "dateFinished":"2017-09-10T14:32:59+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:257",
         "errorMessage":""
      },
      {  
         "text":"%md \n### Implementation of the linechat",
         "dateUpdated":"2017-09-10T14:41:58+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474272_-420980374",
         "id":"20160819-095401_1640725299",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h3>Implementation of the linechat</h3>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:41:58+0000",
         "dateFinished":"2017-09-10T14:41:58+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:258",
         "focus":true
      },
      {  
         "text":"%angular\n\n<style>\n    .line {\n        fill: none;\n        stroke: steelblue;\n        stroke-width: 1.5px;\n    }\n    .block{\n        height: 300px;\n        display: block;\n    }\n    .axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.axis text {\n  font: 10px sans-serif;\n}\n.axis--x text{\n   display: none;\n}\nbody {\n    padding-top: 30px  !important;\n   \n}\n</style>\n\n<script>\nzeppelin.addComponent(\n    \"i2Linechart\",\n    \"\",\n    function(scope,element){\n      \n        element.addClass('block');\n        \n        var n = 500\n            data = []\n        \n        for(var i = 0; i < n; i++){\n            data.push({x:i, y:0});\n        }\n            \n        d3.select(element[0])\n          .attr(\"width\", 500)\n          .attr(\"height\", 300);\n        \n        var svg = d3.select(element[0])\n          .append(\"svg\")\n          .attr(\"width\", 500)\n          .attr(\"height\", 300);\n        \n        var margin = {top: 20, right: 20, bottom: 20, left: 80};\n            \n        width = +svg.attr(\"width\") - margin.left - margin.right;\n        height = +svg.attr(\"height\") - margin.top - margin.bottom;\n         console.log(width)\n        \n        g = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    \n        g.append(\"defs\").append(\"clipPath\")\n            .attr(\"id\", \"clip\")\n            .append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n        var linesvg = g.append(\"path\")\n            .datum(data)\n            .attr(\"class\", \"line\")\n            .attr(\"d\", line);\n            \n        var xScale = d3.scale.linear()\n            .domain([0, n - 1])\n            .range([0, width]);\n     \n    \n        var yScale = d3.scale.linear()\n            .domain([0,n])\n            .range([height, 0]);\n             \n    \n        var line = d3.svg.line()\n            .interpolate(\"monotone\")\n            .x(function (d, i) {\n                \n                return xScale(d.x);\n            })\n            .y(function (d, i) {\n                //console.log(d.y)\n                //console.log(yScale(d.y))\n                return yScale(d.y);\n            });\n  \n        \n            \n        var xAxis = g.append(\"g\")\n            .attr(\"class\", \"axis axis--x\")\n            .attr(\"transform\", \"translate(0,\" + yScale(0) + \")\")\n            .call(d3.svg.axis()\n                .scale(xScale)\n                .orient(\"bottom\"));\n            \n        var yAxis = g.append(\"g\")\n            .attr(\"class\", \"axis axis--y\")\n            .attr(\"transform\", \"translate(405)\")\n            .call(d3.svg.axis()\n                .scale(yScale)\n                \n                .orient(\"right\"));\n\n        function setYScale(){\n            var yValues = _.map(data, function(item){\n                return item.y\n            })\n            \n            var maxY = _.max(yValues);\n            var minY = _.min(yValues);\n            yScale.domain([0, maxY + (maxY*0.1)])\n            yAxis.call(d3.svg.axis()\n                .scale(yScale)\n                .orient(\"right\"));\n        }\n        \n        \n        \n        \n        var isRequested = false;\n        var stop=false;\n        function drawChart() {\n            if(isRequested){\n                isRequested = false;\n                setYScale()\n                linesvg\n                .datum(data)\n                .attr(\"d\", line)\n                //.attr(\"transform\", null);\n                \n                \n            }\n            if(!stop)\n                window.requestAnimationFrame(drawChart);\n        }\n        \n        window.requestAnimationFrame(drawChart);\n    \n        function shiftData(){\n           data = _.map(data, function(item){\n               item.x = item.x - 1;\n               return item;\n           });\n           data = _.filter(data, function(item){\n               return item.x >= 0;\n           });\n            \n        }    \n        \n        \n        \n        var remove = scope.$watch('stream', function(newValue, oldValue) {\n           if(newValue!=undefined){\n               console.log(newValue)\n               var v_min = newValue._1;\n               var v_max = newValue._2;\n               var t_min = newValue._3;\n               var t_max = newValue._4;\n               data.push({x:n, y:t_min});\n               data.push({x:n, y:v_max});\n               data.push({x:n, y:v_min});\n               data.push({x:n, y:t_max});\n               shiftData()\n               isRequested = true;\n           }\n        })\n        scope.$on('clean', function() {\n            remove()\n            stop = true;\n        });\n        \n        isRequested = true;\n})\n</script>",
         "dateUpdated":"2017-09-10T14:32:19+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474273_-421365123",
         "id":"20160921-162019_1914899954",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:20+0000",
         "dateFinished":"2017-09-10T14:32:20+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:259",
         "errorMessage":""
      },
      {  
         "text":"%flink\nimport org.apache.zeppelin.flink.ui._;\nclass LineChartUi() extends UIComponent[(Int,Int,Int,Int,Long), Any](classOf[Any]) {\n\n    scope.remove(\"stream\")\n   \n   override def invoke(dataItem:(Int,Int,Int,Int,Long)) = {\n     scope.put(\"stream\" , dataItem);\n   }\n   \n   def getTemplate(): String = {\n       \"<i2-linechart></i2-linechart>\"\n   }\n}",
         "dateUpdated":"2017-09-10T14:32:20+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474273_-421365123",
         "id":"20160818-104329_2145779919",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:57+0000",
         "dateFinished":"2017-09-10T14:33:00+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:260",
         "errorMessage":""
      },
      {  
         "text":"%md\n### general ui elements\n",
         "dateUpdated":"2017-09-10T14:42:02+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474274_-420210876",
         "id":"20160823-112841_1006384319",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h3>general ui elements</h3>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:42:03+0000",
         "dateFinished":"2017-09-10T14:42:03+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:261",
         "focus":true
      },
      {  
         "text":"%flink\nimport java.util.LinkedList;\nclass ListViewUi(maxItems:Int = 20) extends UIComponent[String,Any](classOf[Any]) {\n   var  list = new LinkedList[String]();\n   scope.remove(\"content\")\n\n   override def invoke(dataItem:String) = {\n     list.add(dataItem.toString)  \n     if(list.size > maxItems){\n         list.removeFirst()\n     }\n     scope.put(\"content\" , list);\n   }\n   \n   def getTemplate(): String = {\n       \"<div ng-repeat='item in content track by $index'>{{$index}}. {{item}}</div>\"\n   }\n}",
         "dateUpdated":"2017-09-10T14:32:21+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474274_-420210876",
         "id":"20160822-104732_265144918",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:59+0000",
         "dateFinished":"2017-09-10T14:33:01+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:262",
         "errorMessage":""
      },
      {  
         "text":"%flink \nimport scala.collection.JavaConverters._\n\nclass Selection(label:String, options : List[String], defaultOption: String) extends UIComponent[Any,String](classOf[String]) {\n   scope.put(\"label\", label)\n   scope.put(\"options\", options.asJava)        \n   scope.put(\"select\", defaultOption)\n   \n   scope.watch(\"select\",(_:String,newValue:String)=>{\n        addMessageToOutputStream(newValue)\n    })\n   \n   def getTemplate(): String = {\n    \"<style> body {    padding-top: 0px  !important; </style>\"+\n    \"<form class='form-inline'>\"+   \n    \"<div class='form-group'>\"+   \n    \"<label for='multipleSelect'> {{label}}: </label><br>\" +\n    \"<select class='form-control' name='multipleSelect' id='multipleSelect' ng-model='select'> \" +\n    \"  <option  ng-repeat='option in options' value='{{option}}'>{{option}}</option>\" +\n    \"</select><br>\"+\n    \"</div>\"+\n    \"</form>\"\n   }\n}",
         "dateUpdated":"2017-09-10T14:32:22+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474274_-420210876",
         "id":"20160823-104238_622762948",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:01+0000",
         "dateFinished":"2017-09-10T14:33:03+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:263",
         "errorMessage":""
      },
      {  
         "text":"%flink \nclass LableUi() extends UIComponent[String,Any](classOf[Any]) {\n  \n   scope.remove(\"content\")\n   override def invoke(content:String) = {\n    \n     scope.put(\"content\" , content);\n   }\n   \n   def getTemplate(): String = {\n        \"<style> .inner-box{      background-color: #BE1F2D; color:#fff;} body {       margin-top: -4px  !important; padding-top: 0px  !important; </style>\"+\n       \"<div class='inner-box'>{{content}}</div>\"\n   }\n}\n\n<style>\n\n</style>",
         "dateUpdated":"2017-09-10T14:32:23+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474274_-420210876",
         "id":"20160825-212132_1167559451",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:01+0000",
         "dateFinished":"2017-09-10T14:33:04+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:264",
         "errorMessage":""
      },
      {  
         "text":"%md\n### register m4 function\n",
         "dateUpdated":"2017-09-10T14:42:05+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474275_-420595625",
         "id":"20160821-113903_1185803154",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h3>register m4 function</h3>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:42:05+0000",
         "dateFinished":"2017-09-10T14:42:05+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:265",
         "focus":true
      },
      {  
         "text":"%flink\nimport org.apache.flink.streaming.api.windowing.assigners._\n/**\n * Input stream with x and y value\n */\nimplicit class M4(stream: DataStream[(Long, Int)]) {\n  def m4(time:Time): DataStream[(Int,Int,Int,Int,Long)] = {\n      val windowedStream = stream\n      .windowAll(TumblingEventTimeWindows.of(time))\n      var v_min = windowedStream.minBy(1).map(x=>(x._2,Int.MinValue, Int.MaxValue, Int.MinValue, x._1));\n      var v_max = windowedStream.maxBy(1).map(x=>(Int.MaxValue, x._2, Int.MaxValue, Int.MinValue, x._1));\n      var t_min = windowedStream.minBy(0).map(x=>(Int.MaxValue, Int.MinValue, x._2, Int.MinValue, x._1));\n      var t_max = windowedStream.maxBy(0).map(x=>(Int.MaxValue, Int.MinValue, Int.MaxValue, x._2, x._1));\n      var allAggregations = v_min.union(v_max, t_min, t_max);\n      allAggregations\n        .windowAll(TumblingEventTimeWindows.of(time))\n        .fold((-100,-100,-100,-100,-100L)) ((current:(Int,Int,Int,Int,Long), value:(Int,Int,Int,Int,Long)) => {value match {\n             case ( v_min, Int.MinValue, Int.MaxValue, Int.MinValue,_)   =>     (v_min, current._2, current._3, current._4,current._5)\n             case ( Int.MaxValue, v_max, Int.MaxValue, Int.MinValue,_)   =>     (current._1, v_max, current._3, current._4,current._5)\n             case ( Int.MaxValue, Int.MinValue, t_min, Int.MinValue,_)   =>     (current._1, current._2, t_min, current._4,current._5)\n             case ( Int.MaxValue, Int.MinValue, Int.MaxValue, t_max,maxTime)   =>     (current._1, current._2, current._3, t_max,maxTime)\n             }})\n  }\n}",
         "dateUpdated":"2017-09-10T14:32:23+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "lineNumbers":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474275_-420595625",
         "id":"20160821-113953_1113616664",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:03+0000",
         "dateFinished":"2017-09-10T14:33:06+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:266",
         "errorMessage":""
      },
      {  
         "text":"%md \n### register generic count aggregation",
         "dateUpdated":"2017-09-10T14:32:24+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474275_-420595625",
         "id":"20170103-131613_1349083393",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:25+0000",
         "dateFinished":"2017-09-10T14:32:25+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:267",
         "errorMessage":""
      },
      {  
         "text":"%flink\nimport org.apache.flink.streaming.api.windowing.assigners._\n\nimplicit class Metric[A](stream: DataStream[A]) {\n  def countItems(): DataStream[String] = {\n        return stream.map(x=>(0,1))\n            .windowAll(TumblingProcessingTimeWindows.of(Time.seconds(1)))\n            .sum(1)\n            .map(x=> x._2 + \" items/s\")\n  }\n}",
         "dateUpdated":"2017-09-10T14:32:25+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474276_-422519370",
         "id":"20161009-235146_755935289",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:04+0000",
         "dateFinished":"2017-09-10T14:33:09+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:268",
         "errorMessage":""
      },
      {  
         "text":"%md \n# Prepare Flink streams and connect them to the ui components",
         "dateUpdated":"2017-09-10T14:32:25+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474276_-422519370",
         "id":"20160819-095447_461825118",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:26+0000",
         "dateFinished":"2017-09-10T14:32:26+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:269",
         "errorMessage":""
      },
      {  
         "text":"%flink \nvar ui = new LableUi()\n",
         "dateUpdated":"2017-09-10T14:32:26+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474276_-422519370",
         "id":"20160825-212323_2098054786",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:07+0000",
         "dateFinished":"2017-09-10T14:33:10+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:270",
         "errorMessage":""
      },
      {  
         "text":"%flink\nvar rawStats = new LableUi()",
         "dateUpdated":"2017-09-10T14:32:27+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/markdown",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474277_-422904119",
         "id":"20161017-084811_339888826",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:09+0000",
         "dateFinished":"2017-09-10T14:33:11+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:271",
         "errorMessage":""
      },
      {  
         "text":"%flink \nimport java.util.Date\nimport org.apache.flink.streaming.api.windowing.assigners._\n\nvar timeStampStream = debsItemDataStream\n                .windowAll(TumblingEventTimeWindows.of(Time.seconds(1)))\n                .maxBy(\"ts\")\n                .map(x=>{\n                    var diff = x.ts - 10753295594424116L; \n                    var secs = diff / 1000000000000L;\n                    var min = secs/60;\n                    var s = secs%60;\n                    \"\"+ min + \"min : \" + s +\"s\"; })",
         "dateUpdated":"2017-09-10T14:32:27+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474277_-422904119",
         "id":"20160825-212900_1463435756",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:10+0000",
         "dateFinished":"2017-09-10T14:33:16+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:272",
         "errorMessage":""
      },
      {  
         "text":"%md \n####playerselection",
         "dateUpdated":"2017-09-10T14:42:08+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474277_-422904119",
         "id":"20160824-175156_465740784",
         "result":{  
            "code":"SUCCESS",
            "type":"HTML",
            "msg":"<h4>playerselection</h4>\n"
         },
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:42:08+0000",
         "dateFinished":"2017-09-10T14:42:08+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:273",
         "focus":true
      },
      {  
         "text":"%flink\nimport org.apache.flink.streaming.api.functions.co.CoFlatMapFunction\nimport org.apache.flink.util.Collector\n\nvar balls = List(4,8,10,12)\nvar activeBallStream = debsItemDataStream.filter(dataItem=> balls.contains(dataItem.sid) && dataItem.v != 0)\nvar playerStream = debsItemDataStream.filter(dataItem=> !balls.contains(dataItem.sid) && dataItem.sid != 97 && dataItem.sid != 98 && dataItem.sid != 99 && dataItem.sid != 100  && dataItem.sid != 105  && dataItem.sid != 106)\n\nvar connectedStreams = playerStream.connect(activeBallStream);\n\n",
         "dateUpdated":"2017-09-10T14:32:28+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474277_-422904119",
         "id":"20160824-184929_2111000686",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:11+0000",
         "dateFinished":"2017-09-10T14:33:22+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:274",
         "errorMessage":""
      },
      {  
         "text":"%flink \nval playerUi = new PlayerUi()",
         "dateUpdated":"2017-09-10T14:32:29+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474278_-421749872",
         "id":"20160825-193827_436061119",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:16+0000",
         "dateFinished":"2017-09-10T14:33:24+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:275",
         "errorMessage":""
      },
      {  
         "text":"%flink \nval playerSidSelectionStream = senv.addSource(playerUi.getOutputStreamSource)\n                                    .name(\"player selection source\");\n\n",
         "dateUpdated":"2017-09-10T14:32:29+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474278_-421749872",
         "id":"20160825-131715_824166683",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:23+0000",
         "dateFinished":"2017-09-10T14:33:27+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:276",
         "errorMessage":""
      },
      {  
         "text":"%flink\nvar connectedStreams = debsItemDataStream.connect(playerSidSelectionStream);\nvar playerDataSelectionStream = connectedStreams.flatMap {\n    new CoFlatMapFunction[DebsDataItem, Int, (Boolean,DebsDataItem)] {\n        \n    var selectedId:Int = 13;\n    \n    override def flatMap2(elem: Int, collector: Collector[(Boolean,DebsDataItem)]): Unit = {\n        selectedId = elem\n    }\n\n    override def flatMap1(dataItem: DebsDataItem, collector: Collector[(Boolean,DebsDataItem)]): Unit = {\n        val status = if (dataItem.sid == selectedId) true else false;\n        collector.collect((status, dataItem))\n    }\n}}",
         "dateUpdated":"2017-09-10T14:32:30+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474278_-421749872",
         "id":"20160825-120319_1391865547",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:25+0000",
         "dateFinished":"2017-09-10T14:33:31+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:277",
         "errorMessage":""
      },
      {  
         "text":"%md \n####Linechart",
         "dateUpdated":"2017-09-10T14:32:30+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474279_-422134621",
         "id":"20160824-174649_1254743247",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:31+0000",
         "dateFinished":"2017-09-10T14:32:31+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:278",
         "errorMessage":""
      },
      {  
         "text":"%flink \nvar linechartMetricSelection = new Selection(\"select metric\",List(\"velocity\",\"acceleration\"),\"velocity\")",
         "dateUpdated":"2017-09-10T14:32:31+0000",
         "config":{  
            "colWidth":3,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474279_-422134621",
         "id":"20160822-105407_1058249252",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:27+0000",
         "dateFinished":"2017-09-10T14:33:33+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:279",
         "errorMessage":""
      },
      {  
         "text":"%flink \nvar linechartWindowSelection = new Selection(\"select windowning\",List(\"30s\",\"1min\",\"5min\"),\"1min\")\n",
         "dateUpdated":"2017-09-10T14:32:31+0000",
         "config":{  
            "colWidth":3,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474279_-422134621",
         "id":"20160824-160916_1475446458",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:32+0000",
         "dateFinished":"2017-09-10T14:33:35+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:280",
         "errorMessage":""
      },
      {  
         "text":"%flink \nval linechartMetricSelectionStream = senv.addSource(linechartMetricSelection.getOutputStreamSource)\n                                    .name(\"Linechart metric selection source\");\nval linechartWindowSelectionStream = senv.addSource(linechartWindowSelection.getOutputStreamSource)\n                                    .name(\"Linechart window selection source\");",
         "dateUpdated":"2017-09-10T14:32:32+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474279_-422134621",
         "id":"20160824-173304_483054539",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:34+0000",
         "dateFinished":"2017-09-10T14:33:36+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:281",
         "errorMessage":""
      },
      {  
         "text":"%flink\nvar linechartStats = new LableUi()",
         "dateUpdated":"2017-09-10T14:32:33+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/html",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474280_-424058365",
         "id":"20161010-091419_1436431982",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:36+0000",
         "dateFinished":"2017-09-10T14:33:37+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:282",
         "errorMessage":""
      },
      {  
         "text":"%flink \nvar linechart = new LineChartUi()",
         "dateUpdated":"2017-09-10T14:32:33+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474280_-424058365",
         "id":"20160821-114515_1240706007",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:36+0000",
         "dateFinished":"2017-09-10T14:33:37+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:283",
         "errorMessage":""
      },
      {  
         "text":"%flink\nimport org.apache.flink.streaming.api.functions.co.CoFlatMapFunction\nimport org.apache.flink.util.Collector\n\n\nvar filteredStream = playerDataSelectionStream\n                    .filter(player => player._1)\n                    .map(player=>player._2)\n\nval connectedStreams = filteredStream.connect(linechartMetricSelectionStream);\nval metricDataStream = connectedStreams.flatMap {\n    new CoFlatMapFunction[DebsDataItem, String, Tuple2[Long,Int]] {\n        \n        var metric = \"velocity\"\n    \n        override def flatMap2(elem: String, collector: Collector[(Long,Int)]): Unit = {\n            metric = elem\n        }\n\n        override def flatMap1(player: DebsDataItem, collector: Collector[(Long,Int)]): Unit = {\n           \n            metric match {\n                case \"velocity\" => collector.collect((player.ts, player.v))\n                case \"acceleration\" => collector.collect((player.ts, player.a))\n            }\n        }\n    }\n}\n\n// We neet to assign the event time again\nclass DebsTimestampAssigner2 extends AssignerWithPunctuatedWatermarks[(Long,Int)](){\n\n    def\textractTimestamp(element:(Long,Int), previousElementTimestamp:Long):Long = {\n        val ms = element._1 / 1000000000L; // The timestamp profided by the dataset is in picoseconds, so we neet to convert it in milliseconds. \n        ms\n    }\n    \n    def  checkAndGetNextWatermark( lastElement: (Long,Int),  extractedTimestamp: Long): Watermark = {\n        // return the watermark as current time minus the maximum time lag\n\t\treturn new Watermark(extractedTimestamp);\n    }\n}\n\nvar filteredStream = metricDataStream.setParallelism(1).assignTimestampsAndWatermarks(new DebsTimestampAssigner2());\n\nval m4Stream30s = filteredStream.m4(Time.milliseconds(60)).map(item=>(\"30s\",item))\nvar m4Stream1min = filteredStream.m4(Time.milliseconds(120)).map(item=>(\"1min\",item))\nval m4Stream5min = filteredStream.m4(Time.milliseconds(600)).map(item=>(\"5min\",item))\n\nvar unionWindows = m4Stream30s.union(m4Stream1min,m4Stream5min)\nvar connectWithWindowSelection = unionWindows.connect(linechartWindowSelectionStream)\nval linechartDataStream = connectWithWindowSelection.flatMap {\n    new CoFlatMapFunction[(String,(Int,Int,Int,Int,Long)), String, (Int,Int,Int,Int,Long)] {\n        \n        var selectedWindow = \"1min\"\n    \n        override def flatMap2(elem: String, collector:  Collector[(Int,Int,Int,Int,Long)]): Unit = {\n            selectedWindow = elem\n        }\n\n        override def flatMap1(metricItem: (String,(Int,Int,Int,Int,Long)), collector: Collector[(Int,Int,Int,Int,Long)]): Unit = {\n            if(metricItem._1.equals(selectedWindow)){\n                collector.collect(metricItem._2);\n            }\n        }\n    }\n}\n",
         "dateUpdated":"2017-09-10T14:32:34+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474280_-424058365",
         "id":"20160823-124717_1486423672",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:37+0000",
         "dateFinished":"2017-09-10T14:33:42+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:284",
         "errorMessage":""
      },
      {  
         "text":"%md \n####Football Field",
         "dateUpdated":"2017-09-10T14:32:34+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/markdown",
            "editorHide":true,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474281_-424443114",
         "id":"20160824-175048_1377829446",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:32:35+0000",
         "dateFinished":"2017-09-10T14:32:35+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:285",
         "errorMessage":""
      },
      {  
         "text":"%flink ",
         "dateUpdated":"2017-09-10T14:32:35+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474281_-424443114",
         "id":"20170313-133614_546006361",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:38+0000",
         "dateFinished":"2017-09-10T14:33:42+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:286",
         "errorMessage":""
      },
      {  
         "text":"%flink \nvar soccerField = new FootballFieldUi()",
         "dateUpdated":"2017-09-10T14:32:36+0000",
         "config":{  
            "tableHide":false,
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "editorHide":false,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474281_-424443114",
         "id":"20160810-190726_872539191",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:42+0000",
         "dateFinished":"2017-09-10T14:33:43+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:287",
         "errorMessage":""
      },
      {  
         "text":"%flink\nvar soccerStats = new LableUi()",
         "dateUpdated":"2017-09-10T14:32:36+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474282_-423288867",
         "id":"20161010-091903_1435461225",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:42+0000",
         "dateFinished":"2017-09-10T14:33:43+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:288",
         "errorMessage":""
      },
      {  
         "text":"%flink \nimport org.apache.flink.streaming.api.windowing.assigners._;\n\nvar time = TumblingProcessingTimeWindows.of(Time.milliseconds(100));\nvar fieldStream = playerDataSelectionStream\n    .map(tuple=>(tuple._2.sid, tuple._2.ts, tuple._2.x, tuple._2.y, tuple._1))\n    .keyBy(0)\n    .window(time)\n    .maxBy(1)\n    .map(player=>(player._1, player._3,player._4,player._5 ))\n    .windowAll(time)\n    \nvar fileFold =     fieldStream.fold(List.empty[(Int, Int, Int,Boolean)]) { (acc, v) =>  v :: acc}",
         "dateUpdated":"2017-09-10T14:32:37+0000",
         "config":{  
            "colWidth":6,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474282_-423288867",
         "id":"20160825-203358_1589001090",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:43+0000",
         "dateFinished":"2017-09-10T14:33:46+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:289",
         "errorMessage":""
      },
      {  
         "text":"%flink \ntimeStampStream.addSink(ui.getSink)    \ndebsItemDataStream.countItems().addSink(rawStats.getSink()).name(\"Raw Stats\")\nlinechartDataStream.addSink(linechart.getSink).name(\"Linechart\")\nlinechartDataStream.countItems().addSink(linechartStats.getSink).name(\"linechart Stats\")\nfileFold.addSink(soccerField.getSink).name(\"Fotballfield\")\nfileFold.countItems().addSink(soccerStats.getSink).name(\"fotballfields Stats\")\n",
         "dateUpdated":"2017-09-10T14:32:37+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474282_-423288867",
         "id":"20161019-160021_1924464366",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:44+0000",
         "dateFinished":"2017-09-10T14:33:47+0000",
         "status":"FINISHED",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:290",
         "errorMessage":""
      },
      {  
         "text":"%flink \n\nsenv.execute(\"i2 demo\")",
         "dateUpdated":"2017-09-10T14:32:38+0000",
         "config":{  
            "colWidth":12,
            "editorMode":"ace/mode/scala",
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1503903474282_-423288867",
         "id":"20160810-182021_2070537316",
         "dateCreated":"2017-08-28T06:57:54+0000",
         "dateStarted":"2017-09-10T14:33:46+0000",
         "dateFinished":"2017-09-10T14:35:06+0000",
         "status":"ERROR",
         "progressUpdateIntervalMs":500,
         "$$hashKey":"object:291",
         "errorMessage":"",
         "focus":true
      },
      {  
         "text":"%flink ",
         "dateUpdated":"2017-09-10T14:32:50+0000",
         "config":{  
            "colWidth":12,
            "graph":{  
               "mode":"table",
               "height":300,
               "optionOpen":false,
               "keys":[  

               ],
               "values":[  

               ],
               "groups":[  

               ],
               "scatter":{  

               }
            },
            "enabled":true
         },
         "settings":{  
            "params":{  

            },
            "forms":{  

            }
         },
         "jobName":"paragraph_1505053970829_-1275085311",
         "id":"20170910-143250_883590203",
         "dateCreated":"2017-09-10T14:32:50+0000",
         "status":"READY",
         "progressUpdateIntervalMs":500,
         "focus":true,
         "$$hashKey":"object:3019",
         "errorMessage":""
      }
   ],
   "name":"i2 dashboard",
   "id":"2CTKFDFH7",
   "lastReplName":{  
      "value":"flink"
   },
   "angularObjects":{  
      "2CR6VSF8X:shared_process":[  

      ],
      "2CT8SJ3RN:shared_process":[  

      ],
      "2CTU4HNUC:shared_process":[  

      ],
      "2CU5UCVT6:shared_process":[  

      ],
      "2CRTSY1MF:shared_process":[  

      ],
      "2CQV6ZJDZ:shared_process":[  

      ],
      "2CR5NJSXN:shared_process":[  

      ],
      "2CR3R48DZ:shared_process":[  

      ],
      "2CQVBJDNP:shared_process":[  

      ],
      "2CR4JKDCH:shared_process":[  

      ],
      "2CRAHJZM2:shared_process":[  

      ],
      "2CRT36XKJ:shared_process":[  

      ],
      "2CQRU25XE:shared_process":[  

      ],
      "2CQMWZEKY:shared_process":[  
         {  
            "name":"content",
            "object":"12229 items/s",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20161017-084811_339888826"
         },
         {  
            "name":"select",
            "object":"1min",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160824-160916_1475446458"
         },
         {  
            "name":"options",
            "object":[  
               "30s",
               "1min",
               "5min"
            ],
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160824-160916_1475446458"
         },
         {  
            "name":"label",
            "object":"select windowning",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160824-160916_1475446458"
         },
         {  
            "name":"selectedSensor",
            "object":13,
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160825-193827_436061119"
         },
         {  
            "name":"manual",
            "object":true,
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160825-193827_436061119"
         },
         {  
            "name":"selectedSensorLocal",
            "object":71,
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160825-193827_436061119"
         },
         {  
            "name":"content",
            "object":"10 items/s",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20161010-091903_1435461225"
         },
         {  
            "name":"content",
            "object":"7 items/s",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20161010-091419_1436431982"
         },
         {  
            "name":"point2",
            "object":[  
               {  
                  "_1":23,
                  "_2":34470,
                  "_3":22131,
                  "_4":false
               },
               {  
                  "_1":47,
                  "_2":38513,
                  "_3":22769,
                  "_4":false
               },
               {  
                  "_1":105,
                  "_2":27456,
                  "_3":14561,
                  "_4":false
               },
               {  
                  "_1":4,
                  "_2":25370,
                  "_3":29650,
                  "_4":false
               },
               {  
                  "_1":65,
                  "_2":31351,
                  "_3":21706,
                  "_4":false
               },
               {  
                  "_1":68,
                  "_2":26200,
                  "_3":19327,
                  "_4":false
               },
               {  
                  "_1":75,
                  "_2":35833,
                  "_3":10126,
                  "_4":false
               },
               {  
                  "_1":8,
                  "_2":-5574,
                  "_3":-9873,
                  "_4":false
               },
               {  
                  "_1":97,
                  "_2":27233,
                  "_3":-14789,
                  "_4":false
               },
               {  
                  "_1":88,
                  "_2":38795,
                  "_3":15283,
                  "_4":false
               },
               {  
                  "_1":63,
                  "_2":34339,
                  "_3":26497,
                  "_4":false
               },
               {  
                  "_1":64,
                  "_2":34263,
                  "_3":26143,
                  "_4":false
               },
               {  
                  "_1":14,
                  "_2":27499,
                  "_3":-15015,
                  "_4":false
               },
               {  
                  "_1":10,
                  "_2":-6001,
                  "_3":15954,
                  "_4":false
               },
               {  
                  "_1":66,
                  "_2":31109,
                  "_3":21088,
                  "_4":false
               },
               {  
                  "_1":74,
                  "_2":24589,
                  "_3":8240,
                  "_4":false
               },
               {  
                  "_1":53,
                  "_2":22974,
                  "_3":13401,
                  "_4":false
               },
               {  
                  "_1":57,
                  "_2":38262,
                  "_3":23220,
                  "_4":false
               },
               {  
                  "_1":100,
                  "_2":27338,
                  "_3":32852,
                  "_4":false
               },
               {  
                  "_1":54,
                  "_2":23010,
                  "_3":13303,
                  "_4":false
               },
               {  
                  "_1":67,
                  "_2":26323,
                  "_3":20000,
                  "_4":false
               },
               {  
                  "_1":16,
                  "_2":38670,
                  "_3":22509,
                  "_4":false
               },
               {  
                  "_1":61,
                  "_2":27641,
                  "_3":32548,
                  "_4":false
               },
               {  
                  "_1":49,
                  "_2":38386,
                  "_3":14936,
                  "_4":false
               },
               {  
                  "_1":69,
                  "_2":20956,
                  "_3":23850,
                  "_4":false
               },
               {  
                  "_1":58,
                  "_2":37776,
                  "_3":22385,
                  "_4":false
               },
               {  
                  "_1":73,
                  "_2":24514,
                  "_3":7833,
                  "_4":false
               },
               {  
                  "_1":62,
                  "_2":27296,
                  "_3":32446,
                  "_4":false
               },
               {  
                  "_1":40,
                  "_2":24835,
                  "_3":31240,
                  "_4":false
               },
               {  
                  "_1":13,
                  "_2":27342,
                  "_3":-14788,
                  "_4":false
               },
               {  
                  "_1":106,
                  "_2":27741,
                  "_3":14249,
                  "_4":false
               },
               {  
                  "_1":28,
                  "_2":45356,
                  "_3":32989,
                  "_4":false
               },
               {  
                  "_1":52,
                  "_2":35069,
                  "_3":14175,
                  "_4":false
               },
               {  
                  "_1":19,
                  "_2":35313,
                  "_3":14783,
                  "_4":false
               },
               {  
                  "_1":59,
                  "_2":45934,
                  "_3":33575,
                  "_4":false
               }
            ],
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160810-190726_872539191"
         },
         {  
            "name":"select",
            "object":"acceleration",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160822-105407_1058249252"
         },
         {  
            "name":"options",
            "object":[  
               "velocity",
               "acceleration"
            ],
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160822-105407_1058249252"
         },
         {  
            "name":"label",
            "object":"select metric",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160822-105407_1058249252"
         },
         {  
            "name":"stream",
            "object":{  
               "_1":171177,
               "_2":298774,
               "_3":171177,
               "_4":268895,
               "_5":11180996208152548
            },
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160821-114515_1240706007"
         },
         {  
            "name":"content",
            "object":"7min : 8s",
            "noteId":"2CTKFDFH7",
            "paragraphId":"20160825-212323_2098054786"
         }
      ],
      "2CRN43535:shared_process":[  

      ],
      "2CSYJYFRK:shared_process":[  

      ],
      "2CTVH34XD:shared_process":[  

      ]
   },
   "config":{  
      "looknfeel":"default"
   },
   "info":{  

   }
}